//HintName: ActivityTelemetryCore.Activity.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

sealed partial class ActivityTelemetryCore : IActivityTelemetry
{
	readonly static System.Diagnostics.ActivitySource _activitySource = new System.Diagnostics.ActivitySource("some-activity");

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	static void RecordExceptionInternal(System.Diagnostics.Activity? activity, System.Exception? exception, bool escape)
	{
		if (activity == null || exception == null)
		{
			return;
		}

		System.Diagnostics.ActivityTagsCollection tagsCollection = new System.Diagnostics.ActivityTagsCollection();
		tagsCollection.Add("exception.escaped", escape);
		tagsCollection.Add("exception.message", exception.Message);
		tagsCollection.Add("exception.type", exception.GetType().FullName);
		tagsCollection.Add("exception.stacktrace", exception.StackTrace);

		System.Diagnostics.ActivityEvent recordExceptionEvent = new System.Diagnostics.ActivityEvent(name: "exception", timestamp: default, tags: tagsCollection);

		activity.AddEvent(recordExceptionEvent);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public System.Diagnostics.Activity? GettingItemFromCache(string key, string itemType)
	{
		if (!_activitySource.HasListeners())
		{
			return null;
		}

		System.Diagnostics.Activity? activityGettingItemFromCache = _activitySource.StartActivity(name: "GettingItemFromCache", kind: System.Diagnostics.ActivityKind.Internal, parentId: default, tags: default, links: default, startTime: default);

		if (activityGettingItemFromCache != null)
		{
			activityGettingItemFromCache.SetTag("itemtype", itemType);
		}

		if (activityGettingItemFromCache != null)
		{
			activityGettingItemFromCache.SetBaggage("key", key);
		}

		return activityGettingItemFromCache;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void Miss(System.Diagnostics.Activity? activity)
	{
		if (!_activitySource.HasListeners())
		{
			return;
		}

		if (activity != null)
		{

			System.Diagnostics.ActivityEvent activityEventMiss = new System.Diagnostics.ActivityEvent(name: "cachemiss", timestamp: default, tags: default);

			activity.AddEvent(activityEventMiss);
		}
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void Hit(System.Diagnostics.Activity? activity)
	{
		if (!_activitySource.HasListeners())
		{
			return;
		}

		if (activity != null)
		{

			System.Diagnostics.ActivityEvent activityEventHit = new System.Diagnostics.ActivityEvent(name: "cachehit", timestamp: default, tags: default);

			activity.AddEvent(activityEventHit);
		}
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void Error(System.Diagnostics.Activity? activity, System.Exception ex)
	{
		if (!_activitySource.HasListeners())
		{
			return;
		}

		if (activity != null)
		{
			System.Diagnostics.ActivityTagsCollection tagsCollectionError = new System.Diagnostics.ActivityTagsCollection();

			RecordExceptionInternal(activity: activity, exception: ex, escape: true);

			System.Diagnostics.ActivityEvent activityEventError = new System.Diagnostics.ActivityEvent(name: "Error", timestamp: default, tags: tagsCollectionError);

			activity.AddEvent(activityEventError);
		}
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void Finished(System.Diagnostics.Activity? activity, System.TimeSpan duration)
	{
		if (!_activitySource.HasListeners())
		{
			return;
		}

		if (activity != null)
		{
			System.Diagnostics.ActivityTagsCollection tagsCollectionFinished = new System.Diagnostics.ActivityTagsCollection();
			tagsCollectionFinished.Add("duration", duration);

			System.Diagnostics.ActivityEvent activityEventFinished = new System.Diagnostics.ActivityEvent(name: "Finished", timestamp: default, tags: tagsCollectionFinished);

			activity.AddEvent(activityEventFinished);
		}
	}

}
