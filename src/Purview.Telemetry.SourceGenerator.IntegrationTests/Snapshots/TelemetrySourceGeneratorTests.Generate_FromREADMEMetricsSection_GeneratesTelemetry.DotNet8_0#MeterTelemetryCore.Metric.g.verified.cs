//HintName: MeterTelemetryCore.Metric.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

sealed partial class MeterTelemetryCore : IMeterTelemetry
{
	System.Diagnostics.Metrics.Meter _meter = default!;

	System.Diagnostics.Metrics.Counter<System.Int32>? _autoIncrementMeterInstrument = null;
	System.Diagnostics.Metrics.Counter<System.Int32>? _counterMeterInstrument = null;
	System.Diagnostics.Metrics.Histogram<System.Int32>? _histogramMeterInstrument = null;
	System.Diagnostics.Metrics.ObservableCounter<System.Single>? _observableCounterMeterInstrument = null;
	System.Diagnostics.Metrics.ObservableGauge<System.Single>? _observableGaugeMeterInstrument = null;
	System.Diagnostics.Metrics.ObservableUpDownCounter<System.Byte>? _observableUpDownCounterInstrument = null;
	System.Diagnostics.Metrics.UpDownCounter<System.Decimal>? _upDownCounterMeterInstrument = null;

	public MeterTelemetryCore(
#if NET8_OR_GREATER
		System.Diagnostics.Metrics.IMeterFactory meterFactory
#endif
	)
	{
		InitializeMeters(
#if NET8_OR_GREATER
			meterFactory
#endif
		);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	void InitializeMeters(
#if NET8_0_OR_GREATER
		System.Diagnostics.Metrics.IMeterFactory meterFactory
#endif
	)
	{
		if (_meter != null)
		{
			throw new System.Exception("The meters have already been initialized.");
		}

#if NET8_0_OR_GREATER
		System.Collections.Generic.Dictionary<string, object?> meterTags = new System.Collections.Generic.Dictionary<string, object?>();

		PopulateMeterTags(meterTags);
#endif

		_meter = 
#if NET8_0_OR_GREATER
			meterFactory.Create(new System.Diagnostics.Metrics.MeterOptions("MeterTelemetry")
			{
				Version = null,
				Tags = meterTags
			});
#else
			new System.Diagnostics.Metrics.Meter(name: "MeterTelemetry", version: null);
#endif

#if !NET7_0

		System.Collections.Generic.Dictionary<string, object?> autoIncrementMeterTags = new System.Collections.Generic.Dictionary<string, object?>();

		PopulateAutoIncrementMeterTags(autoIncrementMeterTags);

#endif

		_autoIncrementMeterInstrument = _meter.CreateCounter<System.Int32>(name: "AutoIncrementMeter", unit: null, description: null
#if !NET7_0
			, tags: autoIncrementMeterTags
#endif
		);

#if !NET7_0

		System.Collections.Generic.Dictionary<string, object?> counterMeterTags = new System.Collections.Generic.Dictionary<string, object?>();

		PopulateCounterMeterTags(counterMeterTags);

#endif

		_counterMeterInstrument = _meter.CreateCounter<System.Int32>(name: "CounterMeter", unit: null, description: null
#if !NET7_0
			, tags: counterMeterTags
#endif
		);

#if !NET7_0

		System.Collections.Generic.Dictionary<string, object?> histogramMeterTags = new System.Collections.Generic.Dictionary<string, object?>();

		PopulateHistogramMeterTags(histogramMeterTags);

#endif

		_histogramMeterInstrument = _meter.CreateHistogram<System.Int32>(name: "HistogramMeter", unit: null, description: null
#if !NET7_0
			, tags: histogramMeterTags
#endif
		);

#if !NET7_0

		System.Collections.Generic.Dictionary<string, object?> upDownCounterMeterTags = new System.Collections.Generic.Dictionary<string, object?>();

		PopulateUpDownCounterMeterTags(upDownCounterMeterTags);

#endif

		_upDownCounterMeterInstrument = _meter.CreateUpDownCounter<System.Decimal>(name: "UpDownCounterMeter", unit: null, description: null
#if !NET7_0
			, tags: upDownCounterMeterTags
#endif
		);
	}

#if NET8_OR_GREATER

	partial void PopulateMeterTags(System.Collections.Generic.Dictionary<string, object?> meterTags);

#endif

#if !NET7_0

	partial void PopulateAutoIncrementMeterTags(System.Collections.Generic.Dictionary<string, object?> instrumentTags);

	partial void PopulateCounterMeterTags(System.Collections.Generic.Dictionary<string, object?> instrumentTags);

	partial void PopulateHistogramMeterTags(System.Collections.Generic.Dictionary<string, object?> instrumentTags);

	partial void PopulateUpDownCounterMeterTags(System.Collections.Generic.Dictionary<string, object?> instrumentTags);

#endif

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void AutoIncrementMeter(string someValue)
	{
		if (_autoIncrementMeterInstrument == null)
		{
			return;
		}

		System.Diagnostics.TagList autoIncrementMeterTagList = new System.Diagnostics.TagList();

		autoIncrementMeterTagList.Add("somevalue", someValue);

		_autoIncrementMeterInstrument.Add(1, tagList: autoIncrementMeterTagList);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void CounterMeter(int measurement, float someValue)
	{
		if (_counterMeterInstrument == null)
		{
			return;
		}

		System.Diagnostics.TagList counterMeterTagList = new System.Diagnostics.TagList();

		counterMeterTagList.Add("somevalue", someValue);

		_counterMeterInstrument.Add(measurement, tagList: counterMeterTagList);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void HistogramMeter(int measurement, int someValue, bool anotherValue)
	{
		if (_histogramMeterInstrument == null)
		{
			return;
		}

		System.Diagnostics.TagList histogramMeterTagList = new System.Diagnostics.TagList();

		histogramMeterTagList.Add("somevalue", someValue);
		histogramMeterTagList.Add("anothervalue", anotherValue);

		_histogramMeterInstrument.Record(measurement, tagList: histogramMeterTagList);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void ObservableCounterMeter(System.Func<float> measurement, double someValue)
	{
		if (_observableCounterMeterInstrument != null)
		{
			return;
		}

		System.Diagnostics.TagList observableCounterMeterTagList = new System.Diagnostics.TagList();

		observableCounterMeterTagList.Add("somevalue", someValue);

		_observableCounterMeterInstrument = _meter.CreateObservableCounter<System.Single>("ObservableCounterMeter", measurement, unit: null, description: null
#if !NET7_0
			, tags: observableCounterMeterTagList
#endif
		);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void ObservableGaugeMeter(System.Func<System.Diagnostics.Metrics.Measurement<System.Single>> measurement, double someValue)
	{
		if (_observableGaugeMeterInstrument != null)
		{
			return;
		}

		System.Diagnostics.TagList observableGaugeMeterTagList = new System.Diagnostics.TagList();

		observableGaugeMeterTagList.Add("somevalue", someValue);

		_observableGaugeMeterInstrument = _meter.CreateObservableGauge<System.Single>("ObservableGaugeMeter", measurement, unit: null, description: null
#if !NET7_0
			, tags: observableGaugeMeterTagList
#endif
		);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void ObservableUpDownCounter(System.Func<System.Collections.Generic.IEnumerable<System.Diagnostics.Metrics.Measurement<System.Byte>>> measurement, double someValue)
	{
		if (_observableUpDownCounterInstrument != null)
		{
			return;
		}

		System.Diagnostics.TagList observableUpDownCounterTagList = new System.Diagnostics.TagList();

		observableUpDownCounterTagList.Add("somevalue", someValue);

		_observableUpDownCounterInstrument = _meter.CreateObservableUpDownCounter<System.Byte>("ObservableUpDownCounter", measurement, unit: null, description: null
#if !NET7_0
			, tags: observableUpDownCounterTagList
#endif
		);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void UpDownCounterMeter(decimal measurement, byte someValue)
	{
		if (_upDownCounterMeterInstrument == null)
		{
			return;
		}

		System.Diagnostics.TagList upDownCounterMeterTagList = new System.Diagnostics.TagList();

		upDownCounterMeterTagList.Add("somevalue", someValue);

		_upDownCounterMeterInstrument.Add(measurement, tagList: upDownCounterMeterTagList);
	}
}
