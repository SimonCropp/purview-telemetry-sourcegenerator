//HintName: Testing.TestMetricsCore.Metric.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	sealed partial class TestMetricsCore : Testing.ITestMetrics
	{
		readonly System.Diagnostics.Metrics.IMeterFactory _meterFactory;

		System.Diagnostics.Metrics.ObservableCounter<System.Int32>? _observableCounterInstrument = null;
		System.Diagnostics.Metrics.ObservableCounter<System.Int32>? _observableCounter2Instrument = null;
		System.Diagnostics.Metrics.ObservableCounter<System.Int32>? _observableCounter3Instrument = null;

		public TestMetricsCore(System.Diagnostics.Metrics.IMeterFactory meterFactory)
		{
			_meterFactory = meterFactory;

			System.Collections.Generic.Dictionary<string, object?> meterTags = new System.Collections.Generic.Dictionary<string, object?>();

			PopulateMeterTags(meterTags);

			System.Diagnostics.Metrics.Meter meter = meterFactory.Create(new System.Diagnostics.Metrics.MeterOptions("testing-observable-meter")
			{
				Version = null,
				Tags = meterTags
			});

		}

		public void ObservableCounter(System.Func<int> f, int intParam, bool boolParam)
		{
			if (_observableCounterInstrument != null)
			{
				return;
			}

			System.Collections.Generic.Dictionary<string, object?> observableCounterTagsList = new System.Collections.Generic.Dictionary<string, object?>();

			observableCounterTagsList.Add("intparam", intParam);
			observableCounterTagsList.Add("boolparam", boolParam);

			_observableCounterInstrument = _meterFactory.CreateObservableCounter<System.Int32>("ObservableCounter", f, tags: observableCounterTagsList);
		}

		public void ObservableCounter2(System.Func<System.Diagnostics.Metrics.Measurement<System.Int32>> f, int intParam, bool boolParam)
		{
			if (_observableCounter2Instrument != null)
			{
				throw new System.Exception("ObservableCounter2 has already been initialized.");
			}

			System.Collections.Generic.Dictionary<string, object?> observableCounter2TagsList = new System.Collections.Generic.Dictionary<string, object?>();

			observableCounter2TagsList.Add("intparam", intParam);
			observableCounter2TagsList.Add("boolparam", boolParam);

			_observableCounter2Instrument = _meterFactory.CreateObservableCounter<System.Int32>("ObservableCounter2", f, tags: observableCounter2TagsList);
		}

		public void ObservableCounter3(System.Func<System.Collections.Generic.IEnumerable<System.Diagnostics.Metrics.Measurement<System.Int32>>> f, int intParam, bool boolParam)
		{
			if (_observableCounter3Instrument != null)
			{
				return;
			}

			System.Collections.Generic.Dictionary<string, object?> observableCounter3TagsList = new System.Collections.Generic.Dictionary<string, object?>();

			observableCounter3TagsList.Add("intparam", intParam);
			observableCounter3TagsList.Add("boolparam", boolParam);

			_observableCounter3Instrument = _meterFactory.CreateObservableCounter<System.Int32>("ObservableCounter3", f, tags: observableCounter3TagsList);
		}
	}
}
