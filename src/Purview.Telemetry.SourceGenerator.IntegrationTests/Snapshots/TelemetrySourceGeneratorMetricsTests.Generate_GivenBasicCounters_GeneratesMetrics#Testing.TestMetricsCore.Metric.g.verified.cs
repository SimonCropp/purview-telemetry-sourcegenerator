//HintName: Testing.TestMetricsCore.Metric.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	sealed partial class TestMetricsCore : Testing.ITestMetrics
	{
		readonly System.Diagnostics.Metrics.Meter _meter;

		readonly System.Diagnostics.Metrics.Counter<System.Int32> _counterInstrument;
		readonly System.Diagnostics.Metrics.Counter<System.Int32> _counter2Instrument;
		readonly System.Diagnostics.Metrics.Counter<System.Int32> _counter3Instrument;
		readonly System.Diagnostics.Metrics.Counter<System.Int32> _counter4Instrument;

		public TestMetricsCore(System.Diagnostics.Metrics.IMeterFactory meterFactory)
		{
			System.Collections.Generic.Dictionary<string, object?> meterTags = new System.Collections.Generic.Dictionary<string, object?>();

			PopulateMeterTags(meterTags);

			_meter = meterFactory.Create(new System.Diagnostics.Metrics.MeterOptions("testing-meter")
			{
				Version = null,
				Tags = meterTags
			});

			_counterInstrument = _meter.CreateCounter<System.Int32>(name: "Counter", unit: null, description: null, tags: null);
			_counter2Instrument = _meter.CreateCounter<System.Int32>(name: "Counter2", unit: null, description: null, tags: null);
			_counter3Instrument = _meter.CreateCounter<System.Int32>(name: "Counter3", unit: null, description: null, tags: null);
			_counter4Instrument = _meter.CreateCounter<System.Int32>(name: "Counter4", unit: null, description: null, tags: null);
		}

		partial void PopulateMeterTags(System.Collections.Generic.Dictionary<string, object?> meterTags);

		public void Counter(int counterValue, int intParam, bool boolParam)
		{
			System.Diagnostics.TagList counterTagList = new System.Diagnostics.TagList();

			counterTagList.Add("intparam", intParam);
			counterTagList.Add("boolparam", boolParam);

			_counterInstrument.Add(counterValue, tagList: counterTagList);
		}

		public void Counter2(int intParam, bool boolParam)
		{
			System.Diagnostics.TagList counter2TagList = new System.Diagnostics.TagList();

			counter2TagList.Add("intparam", intParam);
			counter2TagList.Add("boolparam", boolParam);

			_counter2Instrument.Add(1, tagList: counter2TagList);
		}

		public void Counter3(int intParam, bool boolParam)
		{
			System.Diagnostics.TagList counter3TagList = new System.Diagnostics.TagList();

			counter3TagList.Add("intparam", intParam);
			counter3TagList.Add("boolparam", boolParam);

			_counter3Instrument.Add(1, tagList: counter3TagList);
		}

		public void Counter4(int counterValue, int intParam, bool boolParam)
		{
			System.Diagnostics.TagList counter4TagList = new System.Diagnostics.TagList();

			counter4TagList.Add("intparam", intParam);
			counter4TagList.Add("boolparam", boolParam);

			_counter4Instrument.Add(counterValue, tagList: counter4TagList);
		}
	}
}
