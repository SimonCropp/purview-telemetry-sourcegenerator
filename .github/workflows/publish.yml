# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true

  SolutionPath: ./Purview.Telemetry.SourceGenerator.sln
  BuildConfigutation: Release
  NuGetDirectory: ${{ github.workspace }}/nuget
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

defaults:
  run:
    shell: pwsh
    working-directory: src

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    - uses: paulhatch/semantic-version@v5.4.0
      name: Generate version number
      id: version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    - uses: mathieudutour/github-tag-action@v6.2
      name: Create tag
      id: tag_version
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: ${{ steps.version.outputs.version }}
        tag_prefix: ""

    # - uses: actions/checkout@v4
    # - name: Bump version and push tag
    #   id: tag_version
    #   uses: mathieudutour/github-tag-action@v6.2
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}

    # Install the .NET SDK indicated in the global.json file
    - uses: actions/setup-dotnet@v4
      name: Setup .NET
      
    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - run: dotnet pack ${{ env.SolutionPath }} --configuration ${{ env.BuildConfigutation }} --output ${{ env.NuGetDirectory }} --property:Version=${{ steps.version.outputs.version }} --include-symbols

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  run_test:
    if: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Run tests
      run: dotnet test ${{ env.SolutionPath }} --configuration ${{ env.BuildConfigutation }}

  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    #if: github.event_name == 'release'
    if: false
    runs-on: ubuntu-latest
    needs: [ run_test ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          source-url: https://api.nuget.org/v3/index.json
        env:
          NUGET_API_KEY: ${{ env.NUGET_API_KEY }}
          run: dotnet nuget push ${{ env.NuGetDirectory }}/*.nupkg
