//HintName: Testing.TestMetricsCore.Metric.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	sealed partial class TestMetricsCore : Testing.ITestMetrics
	{
		System.Diagnostics.Metrics.Meter _meter = default!;

		System.Diagnostics.Metrics.Counter<System.Int32>? _counter_AutoIncrementInstrument = null;
		System.Diagnostics.Metrics.Counter<int>? _counterInstrument = null;
		System.Diagnostics.Metrics.Histogram<int>? _histogramInstrument = null;
		System.Diagnostics.Metrics.UpDownCounter<int>? _upDownCounterInstrument = null;
		System.Diagnostics.Metrics.ObservableCounter<int>? _observableCounterInstrument = null;
		System.Diagnostics.Metrics.ObservableGauge<int>? _observableGaugeInstrument = null;
		System.Diagnostics.Metrics.ObservableUpDownCounter<int>? _observableUpDownCounterInstrument = null;

		public TestMetricsCore(
#if NET8_0_OR_GREATER
			System.Diagnostics.Metrics.IMeterFactory meterFactory
#endif
		)
		{
			InitializeMeters(
#if NET8_0_OR_GREATER
				meterFactory
#endif
			);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		void InitializeMeters(
#if NET8_0_OR_GREATER
			System.Diagnostics.Metrics.IMeterFactory meterFactory
#endif
		)
		{
			if (_meter != null)
			{
				throw new System.Exception("The meters have already been initialized.");
			}

#if NET8_0_OR_GREATER
			System.Collections.Generic.Dictionary<string, object?> meterTags = new System.Collections.Generic.Dictionary<string, object?>();

			PopulateMeterTags(meterTags);
#endif

			_meter = 
#if NET8_0_OR_GREATER
				meterFactory.Create(new System.Diagnostics.Metrics.MeterOptions("testing-meter")
				{
					Version = null,
					Tags = meterTags
				});
#else
				new System.Diagnostics.Metrics.Meter(name: "testing-meter", version: null);
#endif

#if !NET7_0

			System.Collections.Generic.Dictionary<string, object?> counter_AutoIncrementTags = new System.Collections.Generic.Dictionary<string, object?>();

			PopulateCounter_AutoIncrementTags(counter_AutoIncrementTags);

#endif

			_counter_AutoIncrementInstrument = _meter.CreateCounter<System.Int32>(name: "Counter_AutoIncrement", unit: null, description: null
#if !NET7_0
				, tags: counter_AutoIncrementTags
#endif
			);

#if !NET7_0

			System.Collections.Generic.Dictionary<string, object?> counterTags = new System.Collections.Generic.Dictionary<string, object?>();

			PopulateCounterTags(counterTags);

#endif

			_counterInstrument = _meter.CreateCounter<int>(name: "Counter", unit: null, description: null
#if !NET7_0
				, tags: counterTags
#endif
			);

#if !NET7_0

			System.Collections.Generic.Dictionary<string, object?> histogramTags = new System.Collections.Generic.Dictionary<string, object?>();

			PopulateHistogramTags(histogramTags);

#endif

			_histogramInstrument = _meter.CreateHistogram<int>(name: "Histogram", unit: null, description: null
#if !NET7_0
				, tags: histogramTags
#endif
			);

#if !NET7_0

			System.Collections.Generic.Dictionary<string, object?> upDownCounterTags = new System.Collections.Generic.Dictionary<string, object?>();

			PopulateUpDownCounterTags(upDownCounterTags);

#endif

			_upDownCounterInstrument = _meter.CreateUpDownCounter<int>(name: "UpDownCounter", unit: null, description: null
#if !NET7_0
				, tags: upDownCounterTags
#endif
			);
		}

#if NET8_0_OR_GREATER

		partial void PopulateMeterTags(System.Collections.Generic.Dictionary<string, object?> meterTags);

#endif

#if !NET7_0

		partial void PopulateCounter_AutoIncrementTags(System.Collections.Generic.Dictionary<string, object?> instrumentTags);

		partial void PopulateCounterTags(System.Collections.Generic.Dictionary<string, object?> instrumentTags);

		partial void PopulateHistogramTags(System.Collections.Generic.Dictionary<string, object?> instrumentTags);

		partial void PopulateUpDownCounterTags(System.Collections.Generic.Dictionary<string, object?> instrumentTags);

#endif

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Counter_AutoIncrement(System.Collections.Generic.List<string> genericParameter)
		{
			if (_counter_AutoIncrementInstrument == null)
			{
				return;
			}

			System.Diagnostics.TagList counter_AutoIncrementTagList = new System.Diagnostics.TagList();

			counter_AutoIncrementTagList.Add("genericparameter", genericParameter);

			_counter_AutoIncrementInstrument.Add(1, tagList: counter_AutoIncrementTagList);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Counter(int value, System.Collections.Generic.List<string> genericParameter)
		{
			if (_counterInstrument == null)
			{
				return;
			}

			System.Diagnostics.TagList counterTagList = new System.Diagnostics.TagList();

			counterTagList.Add("genericparameter", genericParameter);

			_counterInstrument.Add(value, tagList: counterTagList);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Histogram(int value, System.Collections.Generic.List<string> genericParameter)
		{
			if (_histogramInstrument == null)
			{
				return;
			}

			System.Diagnostics.TagList histogramTagList = new System.Diagnostics.TagList();

			histogramTagList.Add("genericparameter", genericParameter);

			_histogramInstrument.Record(value, tagList: histogramTagList);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void UpDownCounter(int value, System.Collections.Generic.List<string> genericParameter)
		{
			if (_upDownCounterInstrument == null)
			{
				return;
			}

			System.Diagnostics.TagList upDownCounterTagList = new System.Diagnostics.TagList();

			upDownCounterTagList.Add("genericparameter", genericParameter);

			_upDownCounterInstrument.Add(value, tagList: upDownCounterTagList);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableCounter(System.Func<int> valueFunc, System.Collections.Generic.List<string> genericParameter)
		{
			if (_observableCounterInstrument != null)
			{
				return;
			}

			System.Diagnostics.TagList observableCounterTagList = new System.Diagnostics.TagList();

			observableCounterTagList.Add("genericparameter", genericParameter);

			_observableCounterInstrument = _meter.CreateObservableCounter<int>("ObservableCounter", valueFunc, unit: null, description: null
#if !NET7_0
				, tags: observableCounterTagList
#endif
			);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableGauge(System.Func<int> valueFunc, System.Collections.Generic.List<string> genericParameter)
		{
			if (_observableGaugeInstrument != null)
			{
				return;
			}

			System.Diagnostics.TagList observableGaugeTagList = new System.Diagnostics.TagList();

			observableGaugeTagList.Add("genericparameter", genericParameter);

			_observableGaugeInstrument = _meter.CreateObservableGauge<int>("ObservableGauge", valueFunc, unit: null, description: null
#if !NET7_0
				, tags: observableGaugeTagList
#endif
			);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableUpDownCounter(System.Func<int> valueFunc, System.Collections.Generic.List<string> genericParameter)
		{
			if (_observableUpDownCounterInstrument != null)
			{
				return;
			}

			System.Diagnostics.TagList observableUpDownCounterTagList = new System.Diagnostics.TagList();

			observableUpDownCounterTagList.Add("genericparameter", genericParameter);

			_observableUpDownCounterInstrument = _meter.CreateObservableUpDownCounter<int>("ObservableUpDownCounter", valueFunc, unit: null, description: null
#if !NET7_0
				, tags: observableUpDownCounterTagList
#endif
			);
		}
	}
}
