//HintName: EntityStoreTelemetryCore.Activity.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

sealed partial class EntityStoreTelemetryCore : IEntityStoreTelemetry
{
	readonly static System.Diagnostics.ActivitySource _activitySource = new System.Diagnostics.ActivitySource("purview.telemetry.sourcegenerator");

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	static void RecordExceptionInternal(System.Diagnostics.Activity? activity, System.Exception? exception, bool escape)
	{
		if (activity == null || exception == null)
		{
			return;
		}

		System.Diagnostics.ActivityTagsCollection tagsCollection = new System.Diagnostics.ActivityTagsCollection();
		tagsCollection.Add("exception.escaped", escape);
		tagsCollection.Add("exception.message", exception.Message);
		tagsCollection.Add("exception.type", exception.GetType().FullName);
		tagsCollection.Add("exception.stacktrace", exception.StackTrace);

		System.Diagnostics.ActivityEvent recordExceptionEvent = new System.Diagnostics.ActivityEvent(name: "exception", timestamp: default, tags: tagsCollection);

		activity.AddEvent(recordExceptionEvent);
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public System.Diagnostics.Activity? GettingEntityFromStore(int entityId, string serviceUrl)
	{
		if (!_activitySource.HasListeners())
		{
			return null;
		}

		System.Diagnostics.Activity? activityGettingEntityFromStore = _activitySource.StartActivity(name: "GettingEntityFromStore", kind: System.Diagnostics.ActivityKind.Internal, parentId: default, tags: default, links: default, startTime: default);

		if (activityGettingEntityFromStore != null)
		{
			activityGettingEntityFromStore.SetTag("entityid", entityId);
		}

		if (activityGettingEntityFromStore != null)
		{
			activityGettingEntityFromStore.SetBaggage("serviceurl", serviceUrl);
		}

		return activityGettingEntityFromStore;
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void GetDuration(System.Diagnostics.Activity? activity, int durationInMS)
	{
		if (!_activitySource.HasListeners())
		{
			return;
		}

		if (activity != null)
		{
			System.Diagnostics.ActivityTagsCollection tagsCollectionGetDuration = new System.Diagnostics.ActivityTagsCollection();
			tagsCollectionGetDuration.Add("durationinms", durationInMS);

			System.Diagnostics.ActivityEvent activityEventGetDuration = new System.Diagnostics.ActivityEvent(name: "GetDuration", timestamp: default, tags: tagsCollectionGetDuration);

			activity.AddEvent(activityEventGetDuration);
		}
	}

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void RetrievedEntity(System.Diagnostics.Activity? activity, float totalValue, int lastUpdatedByUserId)
	{
		if (!_activitySource.HasListeners())
		{
			return;
		}

		if (activity != null)
		{
			activity.SetTag("totalvalue", totalValue);
			activity.SetTag("lastupdatedbyuserid", lastUpdatedByUserId);
		}
	}

}
