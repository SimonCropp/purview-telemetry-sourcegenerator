//HintName: Testing.TestActivitiesCore.Activity.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	sealed partial class TestActivitiesCore : Testing.ITestActivities
	{
		readonly static System.Diagnostics.ActivitySource _activitySource = new System.Diagnostics.ActivitySource("testing-activity-source");

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		static void RecordExceptionInternal(System.Diagnostics.Activity? activity, System.Exception? exception, bool escape)
		{
			if (activity == null || exception == null)
			{
				return;
			}

			System.Diagnostics.ActivityTagsCollection tagsCollection = new System.Diagnostics.ActivityTagsCollection();
			tagsCollection.Add("exception.escaped", escape);
			tagsCollection.Add("exception.message", exception.Message);
			tagsCollection.Add("exception.type", exception.GetType().FullName);
			tagsCollection.Add("exception.stacktrace", exception.StackTrace);

			System.Diagnostics.ActivityEvent recordExceptionEvent = new System.Diagnostics.ActivityEvent(name: "exception", timestamp: default, tags: tagsCollection);

			activity.AddEvent(recordExceptionEvent);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Activity(string stringNonNullParam, int intParam, bool boolParam)
		{
			System.Diagnostics.Activity? activityActivity = _activitySource.StartActivity(name: "Activity", kind: System.Diagnostics.ActivityKind.Internal, parentId: default, tags: default, links: default, startTime: default);

			if (activityActivity != null)
			{
				activityActivity.SetBaggage("stringnonnullparam", stringNonNullParam);
				activityActivity.SetBaggage("intparam", intParam.ToString());
				activityActivity.SetBaggage("boolparam", boolParam.ToString());
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Event(string? stringNullableParam, int? intParam, bool? boolParam)
		{
			if (System.Diagnostics.Activity.Current != null)
			{

				System.Diagnostics.ActivityEvent activityEventEvent = new System.Diagnostics.ActivityEvent(name: "Event", timestamp: default, tags: default);

				System.Diagnostics.Activity.Current.AddEvent(activityEventEvent);

				System.Diagnostics.Activity.Current.SetBaggage("stringnullableparam", stringNullableParam);
				System.Diagnostics.Activity.Current.SetBaggage("intparam", intParam?.ToString());
				System.Diagnostics.Activity.Current.SetBaggage("boolparam", boolParam?.ToString());
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void Context(object? objectParam, string stringNonNullParam, float? floatParam)
		{
			if (System.Diagnostics.Activity.Current != null)
			{
				System.Diagnostics.Activity.Current.SetBaggage("objectparam", objectParam?.ToString());
				System.Diagnostics.Activity.Current.SetBaggage("stringnonnullparam", stringNonNullParam);
				System.Diagnostics.Activity.Current.SetBaggage("floatparam", floatParam?.ToString());
			}
		}

	}
}
