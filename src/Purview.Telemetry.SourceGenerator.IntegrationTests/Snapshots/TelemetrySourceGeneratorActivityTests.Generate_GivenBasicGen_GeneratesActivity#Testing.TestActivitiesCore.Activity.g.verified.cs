//HintName: Testing.TestActivitiesCore.Activity.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	sealed partial class TestActivitiesCore : Testing.ITestActivities
	{
		readonly static System.Diagnostics.ActivitySource _activitySource = new System.Diagnostics.ActivitySource("testing-activity-source");

		public void Activity(string stringParam, int intParam, bool boolParam)
		{
			System.Diagnostics.Activity activityActivity = _activitySource.StartActivity(name: "Activity", kind: System.Diagnostics.ActivityKind.Internal, parentId: default, tags: default, links: default, startTime: default);

			if (activityActivity != null)
			{
				if (intParam != default)
				{
					activityActivity.SetTag("intparam", intParam);
				}
				if (boolParam != default)
				{
					activityActivity.SetTag("boolparam", boolParam);
				}
			}

			if (activityActivity != null)
			{
				if (stringParam != default)
				{
					activityActivity.SetBaggage("stringparam", stringParam);
				}
			}
		}

		public void Event(string stringParam, int intParam, bool boolParam)
		{
			if (System.Diagnostics.Activity.Current != null)
			{
				System.Collections.Generic.List<string, object?> tagsListEvent = new System.Collections.Generic.List<string, object?>();
				if (intParam != default)
				{
					tagsListEvent.Add("intparam", intParam);
				}
				if (boolParam != default)
				{
					tagsListEvent.Add("boolparam", boolParam);
				}
				System.Diagnostics.ActivityEvent activityEventEvent = new System.Diagnostics.ActivityEvent(name: "Event", timestamp: default, tags: tagsListEvent);

				System.Diagnostics.Activity.Current.AddEvent(activityEventEvent);

				if (System.Diagnostics.Activity.Current != null)
				{
					if (stringParam != default)
					{
						System.Diagnostics.Activity.Current.SetBaggage("stringparam", stringParam);
					}
				}
			}
		}

	}
}
