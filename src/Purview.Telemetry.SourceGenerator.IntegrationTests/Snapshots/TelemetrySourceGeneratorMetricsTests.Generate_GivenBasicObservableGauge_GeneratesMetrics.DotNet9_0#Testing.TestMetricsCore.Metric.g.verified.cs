//HintName: Testing.TestMetricsCore.Metric.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Testing
{
	sealed partial class TestMetricsCore : Testing.ITestMetrics
	{
		System.Diagnostics.Metrics.Meter _meter = default!;

		System.Diagnostics.Metrics.ObservableGauge<int>? _observableGaugeInstrument = null;
		System.Diagnostics.Metrics.ObservableGauge<int>? _observableGauge2Instrument = null;
		System.Diagnostics.Metrics.ObservableGauge<int>? _observableGauge3Instrument = null;

		public TestMetricsCore(global::System.Diagnostics.Metrics.IMeterFactory meterFactory)
		{
			InitializeMeters(meterFactory);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		void InitializeMeters(System.Diagnostics.Metrics.IMeterFactory meterFactory)
		{
			if (_meter != null)
			{
				throw new System.Exception("The meters have already been initialized.");
			}

			System.Collections.Generic.Dictionary<string, object?> meterTags = new System.Collections.Generic.Dictionary<string, object?>();

			PopulateMeterTags(meterTags);

			_meter = meterFactory.Create(new System.Diagnostics.Metrics.MeterOptions("testing-meter")
			{
				Version = null,
				Tags = meterTags
			});

		}

		partial void PopulateMeterTags(System.Collections.Generic.Dictionary<string, object?> meterTags);

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableGauge(System.Func<int> f, int intParam, bool boolParam)
		{
			if (_observableGaugeInstrument != null)
			{
				return;
			}

			System.Diagnostics.TagList observableGaugeTagList = new System.Diagnostics.TagList();

			observableGaugeTagList.Add("intparam", intParam);
			observableGaugeTagList.Add("boolparam", boolParam);

			_observableGaugeInstrument = _meter.CreateObservableGauge<int>("observablegauge", f, unit: null, description: null
				, tags: observableGaugeTagList
			);
		}
		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableGauge2(System.Func<System.Diagnostics.Metrics.Measurement<int>> f, int intParam, bool boolParam)
		{
			if (_observableGauge2Instrument != null)
			{
				throw new System.Exception("observablegauge2 has already been initialized.");
			}

			System.Diagnostics.TagList observableGauge2TagList = new System.Diagnostics.TagList();

			observableGauge2TagList.Add("intparam", intParam);
			observableGauge2TagList.Add("boolparam", boolParam);

			_observableGauge2Instrument = _meter.CreateObservableGauge<int>("observablegauge2", f, unit: null, description: null
				, tags: observableGauge2TagList
			);
		}
		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ObservableGauge3(System.Func<System.Collections.Generic.IEnumerable<System.Diagnostics.Metrics.Measurement<int>>> f, int intParam, bool boolParam)
		{
			if (_observableGauge3Instrument != null)
			{
				return;
			}

			System.Diagnostics.TagList observableGauge3TagList = new System.Diagnostics.TagList();

			observableGauge3TagList.Add("intparam", intParam);
			observableGauge3TagList.Add("boolparam", boolParam);

			_observableGauge3Instrument = _meter.CreateObservableGauge<int>("observablegauge3", f, unit: null, description: null
				, tags: observableGauge3TagList
			);
		}
	}
}
