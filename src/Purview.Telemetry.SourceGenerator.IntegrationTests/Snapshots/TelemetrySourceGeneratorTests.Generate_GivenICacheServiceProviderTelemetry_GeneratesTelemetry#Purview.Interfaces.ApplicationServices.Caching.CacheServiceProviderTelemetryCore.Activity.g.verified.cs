//HintName: Purview.Interfaces.ApplicationServices.Caching.CacheServiceProviderTelemetryCore.Activity.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

namespace Purview.Interfaces.ApplicationServices.Caching
{
	sealed partial class CacheServiceProviderTelemetryCore : Purview.Interfaces.ApplicationServices.Caching.ICacheServiceProviderTelemetry
	{
		readonly static System.Diagnostics.ActivitySource _activitySource = new System.Diagnostics.ActivitySource("purview");

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		static void RecordExceptionInternal(System.Diagnostics.Activity? activity, System.Exception? exception, bool escape)
		{
			if (activity == null || exception == null)
			{
				return;
			}

			System.Diagnostics.ActivityTagsCollection tagsCollection = new System.Diagnostics.ActivityTagsCollection();
			tagsCollection.Add("exception.escaped", escape);
			tagsCollection.Add("exception.message", exception.Message);
			tagsCollection.Add("exception.type", exception.GetType().FullName);
			tagsCollection.Add("exception.stacktrace", exception.StackTrace);

			System.Diagnostics.ActivityEvent recordExceptionEvent = new System.Diagnostics.ActivityEvent(name: "exception", timestamp: default, tags: tagsCollection);

			activity.AddEvent(recordExceptionEvent);
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public System.Diagnostics.Activity? GetFromCache()
		{
			System.Diagnostics.Activity? activityGetFromCache = _activitySource.StartActivity(name: "GetFromCache", kind: System.Diagnostics.ActivityKind.Client, parentId: default, tags: default, links: default, startTime: default);

			return activityGetFromCache;
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void NoValueProvided()
		{
			if (System.Diagnostics.Activity.Current != null)
			{

				System.Diagnostics.ActivityEvent activityEventNoValueProvided = new System.Diagnostics.ActivityEvent(name: "NoValueProvided", timestamp: default, tags: default);

				System.Diagnostics.Activity.Current.AddEvent(activityEventNoValueProvided);
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public System.Diagnostics.Activity? SerializePayload()
		{
			System.Diagnostics.Activity? activitySerializePayload = _activitySource.StartActivity(name: "SerializePayload", kind: System.Diagnostics.ActivityKind.Internal, parentId: default, tags: default, links: default, startTime: default);

			return activitySerializePayload;
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void SerializePayloadResult(int payloadStringLength)
		{
			if (System.Diagnostics.Activity.Current != null)
			{
				System.Diagnostics.Activity.Current.SetTag("payloadstringlength", payloadStringLength);
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public System.Diagnostics.Activity? SetInCache()
		{
			System.Diagnostics.Activity? activitySetInCache = _activitySource.StartActivity(name: "SetInCache", kind: System.Diagnostics.ActivityKind.Client, parentId: default, tags: default, links: default, startTime: default);

			return activitySetInCache;
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void SetDefaultTags(string distributedCacheType, string cacheKey, string? entityType)
		{
			if (System.Diagnostics.Activity.Current != null)
			{
				System.Diagnostics.Activity.Current.SetTag("distributedcachetype", distributedCacheType);
				System.Diagnostics.Activity.Current.SetTag("cachekey", cacheKey);
				System.Diagnostics.Activity.Current.SetTag("entitytype", entityType);
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void ValueCached()
		{
			if (System.Diagnostics.Activity.Current != null)
			{

				System.Diagnostics.ActivityEvent activityEventValueCached = new System.Diagnostics.ActivityEvent(name: "ValueCached", timestamp: default, tags: default);

				System.Diagnostics.Activity.Current.AddEvent(activityEventValueCached);
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void RequestingValueFromCache()
		{
			if (System.Diagnostics.Activity.Current != null)
			{

				System.Diagnostics.ActivityEvent activityEventRequestingValueFromCache = new System.Diagnostics.ActivityEvent(name: "RequestingValueFromCache", timestamp: default, tags: default);

				System.Diagnostics.Activity.Current.AddEvent(activityEventRequestingValueFromCache);
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void CacheHit(int? dataLength)
		{
			if (System.Diagnostics.Activity.Current != null)
			{
				System.Diagnostics.ActivityTagsCollection tagsCollectionCacheHit = new System.Diagnostics.ActivityTagsCollection();
				tagsCollectionCacheHit.Add("datalength", dataLength);

				System.Diagnostics.ActivityEvent activityEventCacheHit = new System.Diagnostics.ActivityEvent(name: "CacheHit", timestamp: default, tags: tagsCollectionCacheHit);

				System.Diagnostics.Activity.Current.AddEvent(activityEventCacheHit);
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public void CacheMiss()
		{
			if (System.Diagnostics.Activity.Current != null)
			{

				System.Diagnostics.ActivityEvent activityEventCacheMiss = new System.Diagnostics.ActivityEvent(name: "CacheMiss", timestamp: default, tags: default);

				System.Diagnostics.Activity.Current.AddEvent(activityEventCacheMiss);
			}
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public System.Diagnostics.Activity? DeserializePayload()
		{
			System.Diagnostics.Activity? activityDeserializePayload = _activitySource.StartActivity(name: "DeserializePayload", kind: System.Diagnostics.ActivityKind.Internal, parentId: default, tags: default, links: default, startTime: default);

			return activityDeserializePayload;
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public System.Diagnostics.Activity? Refresh()
		{
			System.Diagnostics.Activity? activityRefresh = _activitySource.StartActivity(name: "Refresh", kind: System.Diagnostics.ActivityKind.Client, parentId: default, tags: default, links: default, startTime: default);

			return activityRefresh;
		}

		[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public System.Diagnostics.Activity? Remove()
		{
			System.Diagnostics.Activity? activityRemove = _activitySource.StartActivity(name: "Remove", kind: System.Diagnostics.ActivityKind.Client, parentId: default, tags: default, links: default, startTime: default);

			return activityRemove;
		}

	}
}
