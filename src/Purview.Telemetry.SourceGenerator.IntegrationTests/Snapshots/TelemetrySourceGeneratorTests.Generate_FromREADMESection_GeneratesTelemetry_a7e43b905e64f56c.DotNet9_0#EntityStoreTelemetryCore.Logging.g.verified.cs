//HintName: EntityStoreTelemetryCore.Logging.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Purview.Telemetry.SourceGenerator
//     on {Scrubbed}.
//
//     Changes to this file may cause incorrect behaviour and will be lost
//     when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591 // publicly visible type or member must be documented

#nullable enable

sealed partial class EntityStoreTelemetryCore : IEntityStoreTelemetry
{

	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void LogMessage()
	{
		if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))
		{
			return;
		}

		var state = new global::Microsoft.Extensions.Logging.LoggerMessageState.ThreadLocalState;
		state.ReserveTagSpace(4);

		_logger.Log(
			global::Microsoft.Extensions.Logging.LogLevel.Information,
			new global::Microsoft.Extensions.Logging.EventId(1180592680, "LogMessage"),
			state,
			null,
			// GENERATE CODEGEN ATTRIB
			static string (global::Microsoft.Extensions.Logging.LoggerMessageState s, global::System.Exception? e) => 
			{
				return string.Empty;
			}
		);
	}


	[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
	public void ExplicitInfoMessage()
	{
		if (!_logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))
		{
			return;
		}

		var state = new global::Microsoft.Extensions.Logging.LoggerMessageState.ThreadLocalState;
		state.ReserveTagSpace(4);

		_logger.Log(
			global::Microsoft.Extensions.Logging.LogLevel.Information,
			new global::Microsoft.Extensions.Logging.EventId(1861353128, "ExplicitInfoMessage"),
			state,
			null,
			// GENERATE CODEGEN ATTRIB
			static string (global::Microsoft.Extensions.Logging.LoggerMessageState s, global::System.Exception? e) => 
			{
				return string.Empty;
			}
		);
	}

}
